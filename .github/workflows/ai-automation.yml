name: AI-Driven Automation Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: 0

jobs:
  # AI Test Generation Job
  ai-test-generation:
    name: ü§ñ AI Test Generation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Generate AI tests
        run: npm run test:ai-generate
        env:
          GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
          
      - name: Upload generated tests
        uses: actions/upload-artifact@v4
        with:
          name: generated-tests
          path: src/tests/generated/

  # Flaky Test Detection
  flaky-detection:
    name: üîç Flaky Test Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Run flaky test detection
        run: npm run test:flaky-detect
        env:
          GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
          
      - name: Upload flaky test report
        uses: actions/upload-artifact@v4
        with:
          name: flaky-test-report
          path: test-results/flaky-tests-report.json

  # Smoke Tests
  smoke-tests:
    name: üöÄ Smoke Tests
    runs-on: ubuntu-latest
    needs: [ai-test-generation]
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
        
      - name: Run smoke tests
        run: npm run test:smoke -- --project=${{ matrix.browser }}
        env:
          GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
          BASE_URL: ${{ secrets.BASE_URL }}
          ZOHO_RECRUIT_API_KEY: ${{ secrets.ZOHO_RECRUIT_API_KEY }}
          ZOHO_PEOPLE_API_KEY: ${{ secrets.ZOHO_PEOPLE_API_KEY }}
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
            allure-results/

  # Visual Regression Tests
  visual-tests:
    name: üé® Visual Regression Tests
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Run visual tests
        run: npm run test:visual
        env:
          GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
          BASE_URL: ${{ secrets.BASE_URL }}
          
      - name: Upload visual test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-test-results
          path: |
            test-results/screenshots/
            test-results/baselines/
            test-results/diffs/

  # Full Regression Suite
  regression-tests:
    name: üîÑ Regression Tests
    runs-on: ubuntu-latest
    needs: [visual-tests]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1, 2, 3, 4]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
        
      - name: Run regression tests
        run: npm run test:regression -- --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/4
        env:
          GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
          BASE_URL: ${{ secrets.BASE_URL }}
          ZOHO_RECRUIT_API_KEY: ${{ secrets.ZOHO_RECRUIT_API_KEY }}
          ZOHO_PEOPLE_API_KEY: ${{ secrets.ZOHO_PEOPLE_API_KEY }}
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: regression-test-results-${{ matrix.browser }}-${{ matrix.shard }}
          path: |
            test-results/
            playwright-report/
            allure-results/

  # AI-Powered Test Analysis
  ai-analysis:
    name: üß† AI Test Analysis
    runs-on: ubuntu-latest
    needs: [regression-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: *-test-results-*
          merge-multiple: true
          
      - name: Run AI analysis
        run: |
          node -e "
          const { AIEngine } = require('./dist/core/ai-engine');
          const fs = require('fs');
          
          async function analyzeResults() {
            const aiEngine = new AIEngine();
            const results = JSON.parse(fs.readFileSync('test-results.json', 'utf8'));
            
            const analysis = await aiEngine.analyzeTestFailure(
              'Test execution completed',
              JSON.stringify(results),
              'screenshot-available'
            );
            
            fs.writeFileSync('ai-analysis-report.md', analysis);
            console.log('AI analysis completed');
          }
          
          analyzeResults().catch(console.error);
          "
        env:
          GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
          
      - name: Upload AI analysis
        uses: actions/upload-artifact@v4
        with:
          name: ai-analysis-report
          path: ai-analysis-report.md

  # Generate Allure Report
  allure-report:
    name: üìä Generate Allure Report
    runs-on: ubuntu-latest
    needs: [regression-tests, ai-analysis]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          pattern: *-test-results-*
          merge-multiple: true
          
      - name: Generate Allure report
        run: npm run test:allure
        
      - name: Upload Allure report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/

  # Deploy to Test Environment
  deploy-test:
    name: üöÄ Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to test environment
        run: |
          echo "Deploying to test environment..."
          # Add your deployment commands here
          
      - name: Run post-deployment tests
        run: npm run test:smoke
        env:
          BASE_URL: ${{ secrets.TEST_BASE_URL }}

  # Notify on Failure
  notify-failure:
    name: üì¢ Notify on Failure
    runs-on: ubuntu-latest
    needs: [smoke-tests, visual-tests, regression-tests]
    if: failure()
    
    steps:
      - name: Notify team
        run: |
          echo "Test execution failed. Please check the logs and reports."
          # Add your notification logic here (Slack, email, etc.)
